package euler;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 * Other options include a formula (requires high-precision floating point
 * numbers) and a precomputed array of sums.
 * 
 * https://medium.com/@TheZaki/project-euler-2-even-fibonacci-numbers-2219e9438970
 *
 */
public class E02EvenFibs {

	int burteForceNotExceeding(int n) {
		int n1 = 1;
		int n2 = 1;
		int result = 0;

		while (true) {
			int sum = n1 + n2;
			if (sum >= n) {
				return result;
			}

			if (sum % 2 == 0) {
				result += sum;
			}

			n1 = n2;
			n2 = sum;
		}
	}

	/*
	 * Fibonacci numbers: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233… The
	 * pattern: odd, odd, even, odd, odd, even, odd, odd, even By expansion of the
	 * series, we end up with EFn = 2:n=0, 8:n=1, 4EFn-1 + EFn-2:n>1
	 */
	int burteForceNotExceedingOptimized(int n) {
		int n1 = 8;
		int n2 = 2;
		int result = 10;

		while (true) {
			int sum = 4 * n1 + n2;
			if (sum >= n) {
				return result;
			}

			result += sum;
			n1 = sum;
			n2 = n1;
		}
	}

}
